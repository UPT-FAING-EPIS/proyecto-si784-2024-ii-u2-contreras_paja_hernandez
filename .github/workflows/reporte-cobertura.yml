name: Pruebas, Cobertura y Reportes en GitHub Pages

on: 
  push:
    branches: 
      - main  
  pull_request:
    branches: 
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Listar archivos para verificar la estructura
        run: ls -R

      # Ejecutar pruebas unitarias con cobertura
      - name: Ejecutar pruebas y recolectar cobertura
        run: |
          cd ProyectoAsistencia/ProyectoAsistencia.Tests  
          dotnet test --collect:"XPlat Code Coverage"

          # Verificar si el archivo de cobertura se generó
          if [ ! -f "TestResults/**/coverage.cobertura.xml" ]; then
            echo "Error: El archivo de cobertura no se generó."
            exit 1
          fi
        continue-on-error: true


      # Generar reporte Stryker
      - name: Generar reporte Stryker
        run: |
          cd ProyectoAsistencia/ProyectoAsistencia.Tests
          dotnet tool install -g dotnet-stryker
          dotnet stryker

          # Validar generación de reportes Stryker
          latest_folder=$(ls -td StrykerOutput/* | head -n 1)
          if [ ! -f "$latest_folder/reports/mutation-report.html" ]; then
            echo "Error: El reporte Stryker no se generó correctamente."
            exit 1
          fi

          mkdir -p Reports/Stryker
          cp "$latest_folder/reports/mutation-report.html" Reports/Stryker/

      # Generar reporte de cobertura
      - name: Generar reporte de cobertura
        run: |
          cd ProyectoAsistencia/ProyectoAsistencia.Tests
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator "-reports:TestResults/**/coverage.cobertura.xml" "-targetdir:Reports/Cobertura" -reporttypes:HTML

          # Validar generación de reporte de cobertura
          if [ ! -f "Reports/Cobertura/index.html" ]; then
            echo "Error: El reporte de cobertura no se generó correctamente."
            exit 1
          fi

      # Preparar y verificar carpeta public
      - name: Preparar carpeta public
        run: |
          mkdir -p public
          cp -r ProyectoAsistencia/ProyectoAsistencia.Tests/Reports/* public/

          # Verificar archivos en la carpeta public
          if [ -z "$(ls -A public)" ]; then
            echo "Error: La carpeta public está vacía."
            exit 1
          fi

      # Publicar ambos reportes en GitHub Pages
      - name: Publicar en GitHub Pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git fetch origin
          git checkout -B gh-pages
          git rm -rf ./*
          cp -r public/* .
          git add .
          git commit -m "Actualizar reportes de pruebas y cobertura"
          git push origin gh-pages --force
